from django.contrib import admin
from .models import DeliveryRequest
from store.models import ProductCategory, Product, Basket, ProductImage
from .forms import DeliveryRequestStatusForm
from decouple import config
from telegram_bot.utils import send_to_telegram_channel

admin.site.register(ProductCategory)

class ProductImageInline(admin.TabularInline):  # –∏–ª–∏ admin.StackedInline
    model = ProductImage
    extra = 1

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    inlines = [ProductImageInline]
    list_display = ('name', 'price', 'quantity', 'category')
    fields = (('name', 'category'), 'description', ('price', 'quantity'), 'image')
    search_fields = ('name',)
    ordering = ('name',)

class BasketAdmin(admin.TabularInline):
    model = Basket
    fields = ('product', 'quantity', 'created_timestamp')
    extra = 1
    readonly_fields = ('created_timestamp',)

class DeliveryRequestAdmin(admin.ModelAdmin):
    list_display = ('id', 'user', 'product', 'quantity', 'address', 'created_at', 'status')
    list_filter = ('status', 'created_at')
    search_fields = ('user__username', 'product__name')
    form = DeliveryRequestStatusForm

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    actions = ['make_in_processing', 'make_in_transit', 'make_delivered']

    def make_in_processing(self, request, queryset):
        queryset.update(status='–í –æ–±—Ä–∞–±–æ—Ç–∫–µ')
    make_in_processing.short_description = "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'"

    def make_in_transit(self, request, queryset):
        queryset.update(status='–í –ø—É—Ç–∏')
    make_in_transit.short_description = "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ '–í –ø—É—Ç–∏'"

    def make_delivered(self, request, queryset):
        queryset.update(status='–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')
    make_delivered.short_description = "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'"

    def save_model(self, request, obj, form, change):
        if change:  # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            old_obj = DeliveryRequest.objects.get(pk=obj.pk)
            if old_obj.status != obj.status:  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                bot_token = config('TELEGRAM_BOT_TOKEN')
                chat_id = config('TELEGRAM_CHAT_ID')
                message = (
                    f"*–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {obj.id}:*\n\n"
                    f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {obj.user.username}\n"
                    f"üì¶ *–ü—Ä–æ–¥—É–∫—Ç:* {obj.product.name}\n"
                    f"üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {obj.quantity}\n"
                    f"üè† *–ê–¥—Ä–µ—Å:* {obj.address}\n"
                    f"üìä *–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å:* {old_obj.status}\n"
                    f"üìä *–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:* {obj.status}"
                )
                send_to_telegram_channel(message, chat_id, bot_token)
        super().save_model(request, obj, form, change)

admin.site.register(DeliveryRequest, DeliveryRequestAdmin)