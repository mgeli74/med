import requests
from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from store.models import DeliveryRequest
import logging
from retrying import retry
from decouple import config

logger = logging.getLogger(__name__)

@retry(stop_max_attempt_number=3, wait_fixed=2000)
def send_telegram_message(url, payload):
    logger.debug(f"URL: {url}")
    logger.debug(f"Payload: {payload}")
    response = requests.post(url, data=payload)
    logger.debug(f"Response: {response.status_code} - {response.text}")
    if response.status_code != 200:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
@receiver(pre_save, sender=DeliveryRequest)
def save_old_status(sender, instance, **kwargs):
    if not instance.pk:  # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ
        instance._old_status = None
        return
    try:
        old_instance = sender.objects.get(pk=instance.pk)
        instance._old_status = old_instance.status
    except sender.DoesNotExist:
        instance._old_status = None

@receiver(post_save, sender=DeliveryRequest)
def delivery_request_created(sender, instance, created, **kwargs):
    bot_token = config('TELEGRAM_BOT_TOKEN')
    chat_id = config('TELEGRAM_CHAT_ID')
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"

    logger.debug(f"Bot Token: {bot_token}")
    logger.debug(f"Chat ID: {chat_id}")

    if created:
        message = (
            f"*–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É:*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {instance.user.username}\n"
            f"üì¶ *–ü—Ä–æ–¥—É–∫—Ç:* {instance.product.name}\n"
            f"üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {instance.quantity}\n"
            f"üè† *–ê–¥—Ä–µ—Å:* {instance.address}\n"
            f"üìä *–°—Ç–∞—Ç—É—Å:* {instance.status}"
        )
    else:
        old_status = getattr(instance, '_old_status', None)
        logger.debug(f"Old Status: {old_status}")
        logger.debug(f"New Status: {instance.status}")
        if old_status is None or old_status == instance.status:
            logger.debug("–°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        message = (
            f"*–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {instance.id}:*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {instance.user.username}\n"
            f"üì¶ *–ü—Ä–æ–¥—É–∫—Ç:* {instance.product.name}\n"
            f"üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {instance.quantity}\n"
            f"üè† *–ê–¥—Ä–µ—Å:* {instance.address}\n"
            f"üìä *–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å:* {old_status}\n"
            f"üìä *–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:* {instance.status}"
        )

    if not created and instance.status == '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':
        instance.update_stock_and_clear_basket()

    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "Markdown"
    }

    try:
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {payload}")
        send_telegram_message(url, payload)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")